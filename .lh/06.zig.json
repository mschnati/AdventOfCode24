{
    "sourceFile": "06.zig",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1733564496511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733564501849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,6 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const reader = file.reader();\n-    var result = try part_1(reader);\n\\ No newline at end of file\n+    var result = try part_1(reader);\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733564509846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,7 @@\n     defer file.close();\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n-}\n\\ No newline at end of file\n+}\n+\n+fn part_1(reader):\n"
                },
                {
                    "date": 1733564522878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,4 +9,5 @@\n     var result = try part_1(reader);\n }\n \n fn part_1(reader):\n+    rst\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733564616637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,5 +9,13 @@\n     var result = try part_1(reader);\n }\n \n fn part_1(reader):\n-    rst\n\\ No newline at end of file\n+    fn part_1 (reader: anytype) !u16 {\n+    var safe_reports: u16 = 0;\n+    var line_buffer: [128]u8 = undefined;\n+ \n+    // iterate lines\n+    while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n+        var safe: bool = true;\n+        const trimmed_line = std.mem.trimRight(u8, line, \" \\n\\t\\r\"); \n+        var tokenizer = std.mem.tokenizeSequence(u8, trimmed_line, \" \");\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733564625769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     var result = try part_1(reader);\n }\n \n fn part_1(reader):\n-    fn part_1 (reader: anytype) !u16 {\n+\n     var safe_reports: u16 = 0;\n     var line_buffer: [128]u8 = undefined;\n  \n     // iterate lines\n"
                },
                {
                    "date": 1733564631484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n+n\n+fn part_1 (reader: anytype) !u16 {\n \n-fn part_1(reader):\n-\n     var safe_reports: u16 = 0;\n     var line_buffer: [128]u8 = undefined;\n  \n     // iterate lines\n"
                },
                {
                    "date": 1733564641822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,11 @@\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n-n\n+\n fn part_1 (reader: anytype) !u16 {\n-\n-    var safe_reports: u16 = 0;\n+    var count: u16 = 0;\n     var line_buffer: [128]u8 = undefined;\n  \n     // iterate lines\n     while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n"
                },
                {
                    "date": 1733564691123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n }\n \n fn part_1 (reader: anytype) !u16 {\n     var count: u16 = 0;\n-    var line_buffer: [128]u8 = undefined;\n+    var line_buffer: [140]u8 = undefined;\n  \n     // iterate lines\n     while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n         var safe: bool = true;\n"
                },
                {
                    "date": 1733565194676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n pub fn main () !void {\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n+    \n+\n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n \n"
                },
                {
                    "date": 1733565227988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n pub fn main () !void {\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n-    \n+    file.getEndPos()\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565236714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n pub fn main () !void {\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n-    file.getEndPos()\n+    const end = file.getEndPos();\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565244144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const end = file.getEndPos();\n+    stdout.print(comptime format: []const u8, args: anytype)\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565256539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const end = file.getEndPos();\n-    stdout.print(comptime format: []const u8, args: anytype)\n+    stdout.print(\"end\", args: anytype)\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565262940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const end = file.getEndPos();\n-    stdout.print(\"end\", args: anytype)\n+    stdout.print(\"end: {}\", )\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565269822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const end = file.getEndPos();\n-    stdout.print(\"end: {}\", )\n+    stdout.print(\"end: {}\", .{end});\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n }\n"
                },
                {
                    "date": 1733565277023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,5 +19,5 @@\n     // iterate lines\n     while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n         var safe: bool = true;\n         const trimmed_line = std.mem.trimRight(u8, line, \" \\n\\t\\r\"); \n-        var tokenizer = std.mem.tokenizeSequence(u8, trimmed_line, \" \");\n\\ No newline at end of file\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733565288444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,5 +19,8 @@\n     // iterate lines\n     while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n         var safe: bool = true;\n         const trimmed_line = std.mem.trimRight(u8, line, \" \\n\\t\\r\"); \n-        \n\\ No newline at end of file\n+        \n+    }\n+    re\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733565294744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,6 +21,7 @@\n         var safe: bool = true;\n         const trimmed_line = std.mem.trimRight(u8, line, \" \\n\\t\\r\"); \n         \n     }\n-    re\n+    \n+    return safe;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733565305367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,7 @@\n         var safe: bool = true;\n         const trimmed_line = std.mem.trimRight(u8, line, \" \\n\\t\\r\"); \n         \n     }\n-    \n-    return safe;\n+\n+    return count;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733565321618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     stdout.print(\"end: {}\", .{end});\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n+    \n }\n \n fn part_1 (reader: anytype) !u16 {\n     var count: u16 = 0;\n"
                },
                {
                    "date": 1733565329952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     stdout.print(\"end: {}\", .{end});\n \n     const reader = file.reader();\n     const result = try part_1(reader);\n-\n+    \n }\n \n fn part_1 (reader: anytype) !u16 {\n     var count: u16 = 0;\n"
                },
                {
                    "date": 1733565339176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     stdout.print(\"end: {}\", .{end});\n \n     const reader = file.reader();\n     const result = try part_1(reader);\n-    stdout.print(comptime format: []const u8, args: anytype)\n+    stdout.print(\"comptime format: []const u8\", args: anytype)\n }\n \n fn part_1 (reader: anytype) !u16 {\n     var count: u16 = 0;\n"
                }
            ],
            "date": 1733564496511,
            "name": "Commit-0",
            "content": "const std = @import(\"std\");\nconst stdout = std.io.getStdOut().writer();\n\npub fn main () !void {\n    var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n    defer file.close();\n\n    const reader = file.reader();\n    var result = try part_1(reader);"
        }
    ]
}