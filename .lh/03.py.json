{
    "sourceFile": "03.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733230680317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733230704847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n with open(i) as file:\n     memory = file.read()\n \n '''\n-It seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), \n+It does that with instructions like mul(X,Y), \n where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, \n mul(123,4) would multiply 123 by 4.\n \n However, because the program's memory has been corrupted, there are also many invalid characters that should be ignored, \n"
                },
                {
                    "date": 1733230717661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,9 @@\n with open(i) as file:\n     memory = file.read()\n \n '''\n-mul(X,Y), \n-where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, \n+mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, \n mul(123,4) would multiply 123 by 4.\n \n However, because the program's memory has been corrupted, there are also many invalid characters that should be ignored, \n even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\n"
                },
                {
                    "date": 1733235393904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n                 result += add\n             else:\n                 break # dont found\n \n-        memory = memory.partition('do()')[-1] #@\n+        memory = memory.partition('do()')[-1] #\n \n     return result\n \n print(\"Part 2: \" + str(part_2(memory)))\n"
                }
            ],
            "date": 1733230680317,
            "name": "Commit-0",
            "content": "i = \"inputs/input_03.txt\"\nt = \"test.txt\"\nwith open(i) as file:\n    memory = file.read()\n\n'''\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), \nwhere X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, \nmul(123,4) would multiply 123 by 4.\n\nHowever, because the program's memory has been corrupted, there are also many invalid characters that should be ignored, \neven if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\n\nFor example, consider the following section of corrupted memory:\n\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\n\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).\n\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n'''\n\ndef eval_next_mult(memory: str):\n    memory = memory.partition('mul(')[-1]\n    partition = memory.partition(')')\n    memory = partition[-1]\n    param = partition[0]\n    param_split = param.split(',')\n\n    if len(param_split) != 2: # not 2 params\n        memory = partition[0] + partition[1] + partition[-1] # rebuild string and check after previous 'mul('\n        return memory, 0\n\n    if param_split[0].isnumeric() and param_split[1].isnumeric():\n        result = int(param_split[0]) * int(param_split[1])\n        return memory, result\n    else:\n        memory = partition[0] + partition[1] + partition[-1]\n    return memory, 0\n\ndef part_1(memory: str):\n    result = 0\n    while memory != \"\":\n        memory, add = eval_next_mult(memory)\n        result += add\n\n    return result\n\nprint('Part 1: ' + str(part_1(memory)))\n\n'''--- Part Two ---\n\nAs you scan through the corrupted memory, you notice that some of the conditional statements are also still intact. \nIf you handle some of the uncorrupted conditional statements in the program, you might be able to get an even more accurate result.\n\nThere are two new instructions you'll need to handle:\n\n    The do() instruction enables future mul instructions.\n    The don't() instruction disables future mul instructions.\n\nOnly the most recent do() or don't() instruction applies. At the beginning of the program, mul instructions are enabled.\n\nFor example:\n\nxmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))\n\nThis corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions \nare disabled because there is a don't() instruction before them. The other mul instructions function normally, \nincluding the one at the end that gets re-enabled by a do() instruction.\n\nThis time, the sum of the results is 48 (2*4 + 8*5).\n\nHandle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?\n'''\n\ndef part_2(memory: str):\n    result = 0\n\n    while memory != \"\":\n        while (memory != \"\"):\n            pre_mul = memory.partition('mul(')[0]\n            dont = pre_mul.find('don\\'t()') # dont in part before 'mul('\n            if dont == -1:\n                memory, add = eval_next_mult(memory)\n                result += add\n            else:\n                break\n\n        memory = memory.partition('do()')[-1]\n\n    return result\n\nprint(\"Part 2: \" + str(part_2(memory)))\n"
        }
    ]
}