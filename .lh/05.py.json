{
    "sourceFile": "05.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1733517993215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733518012281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             continue  # Skip empty orders\n         pages_set = set(pages) # remove duplicates\n         applicable_rules = [ # only keep rules that apply to both pages of the order\n             (x.strip(), y.strip()) for x, y in rules\n-            if x.strip() in pages_set and y.strip() in pages_set\n+            if x.strip() not in pages_set and y.strip() in pages_set\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n"
                },
                {
                    "date": 1733518025220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             continue  # Skip empty orders\n         pages_set = set(pages) # remove duplicates\n         applicable_rules = [ # only keep rules that apply to both pages of the order\n             (x.strip(), y.strip()) for x, y in rules\n-            if x.strip() not in pages_set and y.strip() in pages_set\n+            if x.strip() in pages_set and y.strip() in pages_set\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n"
                },
                {
                    "date": 1733518140910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         valid = True\n         for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n+            if index_map[x] = index_map[y]: # if the order of the pages != order in the rules\n                 valid = False\n                 break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518147647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         valid = True\n         for x, y in applicable_rules:\n-            if index_map[x] = index_map[y]: # if the order of the pages != order in the rules\n+            if index_map[x] < index_map[y]: # if the order of the pages != order in the rules\n                 valid = False\n                 break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518226316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,7 +73,9 @@\n             if index_map[x] < index_map[y]: # if the order of the pages != order in the rules\n                 valid = False\n                 break\n         if valid:\n+\n+            \n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518303995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,11 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         valid = True\n         for x, y in applicable_rules:\n-            if index_map[x] < index_map[y]: # if the order of the pages != order in the rules\n+            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n                 valid = False\n                 break\n         if valid:\n-\n-            \n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518319999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         valid = True\n         for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n+            if index_map[x] >= index_map[y]: # fix\n                 valid = False\n                 break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518326114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         valid = True\n         for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # fix\n+            if index_map[x] >= index_map[y]: # fix pages\n                 valid = False\n                 break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518332560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+i = \"inputs/input_05.txt\"\n+t = \"test.txt\"\n+\n+rules = []\n+orders = []\n+with open(t) as file:\n+    for line in file:\n+        line = line.replace('\\n', '')\n+        partition = line.partition('|')\n+        if partition[1] != '':\n+            rules.append((partition[0], partition[2]))\n+        else:\n+            orders.append(line.split(','))\n+\n+\n+def part_1(rules, orders):\n+    total = 0\n+    for order in orders:\n+        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n+        if not pages:\n+            continue  # Skip empty orders\n+        pages_set = set(pages) # remove duplicates\n+        applicable_rules = [ # only keep rules that apply to both pages of the order\n+            (x.strip(), y.strip()) for x, y in rules\n+            if x.strip() in pages_set and y.strip() in pages_set\n+        ]\n+\n+        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n+        print(index_map)\n+        valid = True\n+        for x, y in applicable_rules:\n+            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n+                valid = False\n+                break\n+        if valid:\n+            middle_index = len(pages) // 2 # integer division\n+            middle_page = int(pages[middle_index])\n+            total += middle_page\n+    print(total)\n+\n+\n+part_1(rules, orders)\n+\n+\n+'''--- Part Two ---\n+For each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. \n+For the above example, here are the three incorrectly-ordered updates and their correct orderings:\n+\n+    75,97,47,61,53 becomes 97,75,47,61,53.\n+    61,13,29 becomes 61,29,13.\n+    97,13,75,29,47 becomes 97,75,47,29,13.\n+\n+Take only the incorrectly-ordered updates and order them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.\n+\n+Find updates which are not in the correct order. Add up the middle page numbers after correctly ordering just those updates\n+'''\n+def part_2(rules, orders):\n+    total = 0\n+    for order in orders:\n+        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n+        if not pages:\n+            continue  # Skip empty orders\n+        pages_set = set(pages) # remove duplicates\n+        applicable_rules = [ # only keep rules that apply to both pages of the order\n+            (x.strip(), y.strip()) for x, y in rules\n+            if x.strip() in pages_set and y.strip() in pages_set\n+        ]\n+\n+        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n+        print(index_map)\n+        valid = True\n+        for x, y in applicable_rules:\n+            if index_map[x] >= index_map[y]: # fix pages\n+                \n+\n+                \n+                break\n+        if valid:\n+            middle_index = len(pages) // 2 # integer division\n+            middle_page = int(pages[middle_index])\n+            total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518494669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,94 +67,15 @@\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n-        valid = True\n+        fixed = True\n         for x, y in applicable_rules:\n             if index_map[x] >= index_map[y]: # fix pages\n                 \n \n-                \n-                break\n-        if valid:\n-            middle_index = len(pages) // 2 # integer division\n-            middle_page = int(pages[middle_index])\n-            total += middle_page\n-i = \"inputs/input_05.txt\"\n-t = \"test.txt\"\n \n-rules = []\n-orders = []\n-with open(t) as file:\n-    for line in file:\n-        line = line.replace('\\n', '')\n-        partition = line.partition('|')\n-        if partition[1] != '':\n-            rules.append((partition[0], partition[2]))\n-        else:\n-            orders.append(line.split(','))\n-\n-\n-def part_1(rules, orders):\n-    total = 0\n-    for order in orders:\n-        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n-        if not pages:\n-            continue  # Skip empty orders\n-        pages_set = set(pages) # remove duplicates\n-        applicable_rules = [ # only keep rules that apply to both pages of the order\n-            (x.strip(), y.strip()) for x, y in rules\n-            if x.strip() in pages_set and y.strip() in pages_set\n-        ]\n-\n-        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n-        print(index_map)\n-        valid = True\n-        for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n-                valid = False\n                 break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n-            total += middle_page\n-    print(total)\n-\n-\n-part_1(rules, orders)\n-\n-\n-'''--- Part Two ---\n-For each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. \n-For the above example, here are the three incorrectly-ordered updates and their correct orderings:\n-\n-    75,97,47,61,53 becomes 97,75,47,61,53.\n-    61,13,29 becomes 61,29,13.\n-    97,13,75,29,47 becomes 97,75,47,29,13.\n-\n-Take only the incorrectly-ordered updates and order them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.\n-\n-Find updates which are not in the correct order. Add up the middle page numbers after correctly ordering just those updates\n-'''\n-def part_2(rules, orders):\n-    total = 0\n-    for order in orders:\n-        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n-        if not pages:\n-            continue  # Skip empty orders\n-        pages_set = set(pages) # remove duplicates\n-        applicable_rules = [ # only keep rules that apply to both pages of the order\n-            (x.strip(), y.strip()) for x, y in rules\n-            if x.strip() in pages_set and y.strip() in pages_set\n-        ]\n-\n-        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n-        print(index_map)\n-        valid = True\n-        for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # fix pages\n-                valid = False\n-                break\n-        if valid:\n-            middle_index = len(pages) // 2 # integer division\n-            middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518500750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n-        fixed = True\n+        fixed = False\n         for x, y in applicable_rules:\n             if index_map[x] >= index_map[y]: # fix pages\n                 \n \n"
                },
                {
                    "date": 1733518513450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         fixed = False\n+        while fixed is False:\n         for x, y in applicable_rules:\n             if index_map[x] >= index_map[y]: # fix pages\n                 \n \n"
                },
                {
                    "date": 1733518519400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,14 +69,14 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         fixed = False\n         while fixed is False:\n-        for x, y in applicable_rules:\n-            if index_map[x] >= index_map[y]: # fix pages\n-                \n+            for x, y in applicable_rules:\n+                if index_map[x] >= index_map[y]: # fix pages\n+                    \n \n \n-                break\n+                    break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518545534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         fixed = False\n         while fixed is False:\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n-                    \n+                    temp = index\n \n \n                     break\n         if valid:\n"
                },
                {
                    "date": 1733518558027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,10 @@\n         fixed = False\n         while fixed is False:\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n-                    temp = index\n+                    temp = index_map[x]\n+                    index_map[x] = index_map[y]\n \n \n                     break\n         if valid:\n"
                },
                {
                    "date": 1733518572428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,10 @@\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n+                    index_map[y] = temp\n \n-\n                     break\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n"
                },
                {
                    "date": 1733518577702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n                 if index_map[x] >= index_map[y]: # fix pages\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n-\n                     break\n+                \n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518615686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     break\n-                \n+                    \n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518736101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         fixed = False\n         while fixed is False:\n+            \n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n"
                },
                {
                    "date": 1733518744555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         fixed = False\n         while fixed is False:\n-            \n+            fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n"
                },
                {
                    "date": 1733518752123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,9 @@\n                 if index_map[x] >= index_map[y]: # fix pages\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n+                    fixed = False\n                     break\n                     \n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518826425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n         print(index_map)\n         fixed = False\n+        valid = False\n         while fixed is False:\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n"
                },
                {
                    "date": 1733518840079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     fixed = False\n+                    valid = True\n                     break\n                     \n         if valid:\n             middle_index = len(pages) // 2 # integer division\n"
                },
                {
                    "date": 1733518891666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n             if x.strip() in pages_set and y.strip() in pages_set\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n-        print(index_map)\n+\n         valid = True\n         for x, y in applicable_rules:\n             if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n                 valid = False\n"
                },
                {
                    "date": 1733518897433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             if x.strip() in pages_set and y.strip() in pages_set\n         ]\n \n         index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n-        print(index_map)\n+\n         fixed = False\n         valid = False\n         while fixed is False:\n             fixed = True\n"
                },
                {
                    "date": 1733518905605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,5 +83,6 @@\n                     \n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n-            total += middle_page\n\\ No newline at end of file\n+            total += middle_page\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518911231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,5 @@\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n-    \n\\ No newline at end of file\n+    print(total)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518923841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,7 @@\n         if valid:\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n-    print(total)\n\\ No newline at end of file\n+    print(total)\n+\n+par\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518929891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,5 +86,5 @@\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n \n-par\n\\ No newline at end of file\n+part_2(rules)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518969778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n         while fixed is False:\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n+                    \n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     fixed = False\n@@ -86,5 +87,5 @@\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n \n-part_2(rules)\n\\ No newline at end of file\n+part_2(rules, orders)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733518976579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         while fixed is False:\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n-                    \n+                    print(index_map)\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     fixed = False\n"
                },
                {
                    "date": 1733519026482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n+            print(ind)\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519034206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(ind)\n+            print(index_map[])\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519046884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(index_map[])\n+            print(index_map.)\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519059817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(index_map.)\n+            print(index_map.\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519076534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(index_map.\n+            print(index_map.values\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519086943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(index_map.values\n+            print(index_map.values())\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519097431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            print(index_map.values())\n+            print(index_map.keys())\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n     print(total)\n"
                },
                {
                    "date": 1733519159404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n                     print(index_map)\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n+                                        print(index_map)\n                     fixed = False\n                     valid = True\n                     break\n                     \n"
                },
                {
                    "date": 1733519189677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,12 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    temp = index_map[x]\n+                    temp = index_map[x].\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n-                                        print(index_map)\n+                    print(index_map)\n                     fixed = False\n                     valid = True\n                     break\n                     \n"
                },
                {
                    "date": 1733519195786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    temp = index_map[x].\n+                    temp = index_map[x].value()\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     print(index_map)\n                     fixed = False\n"
                },
                {
                    "date": 1733519212391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    temp = index_map[x].value()\n+                    temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     print(index_map)\n                     fixed = False\n"
                },
                {
                    "date": 1733519285213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n                     valid = True\n                     break\n                     \n         if valid:\n+            index_map.sort()\n             print(index_map.keys())\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n"
                },
                {
                    "date": 1733519589345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,11 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    temp = index_map[x]\n-                    index_map[x] = index_map[y]\n-                    index_map[y] = temp\n+                    # Swap the keys\n+index_map[key1], index_map[key2] = index_map[key2], index_map[key1]\n+index_map = {key2 if k == key1 else key1 if k == key2 else k: v for k, v in index_map.items()}\n                     print(index_map)\n                     fixed = False\n                     valid = True\n                     break\n"
                },
                {
                    "date": 1733519601329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,8 @@\n                     valid = True\n                     break\n                     \n         if valid:\n-            index_map.sort()\n             print(index_map.keys())\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n"
                },
                {
                    "date": 1733519635669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,17 +74,18 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    # Swap the keys\n-index_map[key1], index_map[key2] = index_map[key2], index_map[key1]\n-index_map = {key2 if k == key1 else key1 if k == key2 else k: v for k, v in index_map.items()}\n+                    temp = index_map[x]\n+                    index_map[x] = index_map[y]\n+                    index_map[y] = temp\n                     print(index_map)\n                     fixed = False\n                     valid = True\n                     break\n                     \n         if valid:\n+            index_map.sort()\n             print(index_map.keys())\n             middle_index = len(pages) // 2 # integer division\n             middle_page = int(pages[middle_index])\n             total += middle_page\n"
                },
                {
                    "date": 1733519660280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             fixed = True\n             for x, y in applicable_rules:\n                 if index_map[x] >= index_map[y]: # fix pages\n                     print(index_map)\n-                    print\n+                    print()\n                     temp = index_map[x]\n                     index_map[x] = index_map[y]\n                     index_map[y] = temp\n                     print(index_map)\n"
                }
            ],
            "date": 1733517993215,
            "name": "Commit-0",
            "content": "i = \"inputs/input_05.txt\"\nt = \"test.txt\"\n\nrules = []\norders = []\nwith open(t) as file:\n    for line in file:\n        line = line.replace('\\n', '')\n        partition = line.partition('|')\n        if partition[1] != '':\n            rules.append((partition[0], partition[2]))\n        else:\n            orders.append(line.split(','))\n\n\ndef part_1(rules, orders):\n    total = 0\n    for order in orders:\n        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n        if not pages:\n            continue  # Skip empty orders\n        pages_set = set(pages) # remove duplicates\n        applicable_rules = [ # only keep rules that apply to both pages of the order\n            (x.strip(), y.strip()) for x, y in rules\n            if x.strip() in pages_set and y.strip() in pages_set\n        ]\n\n        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n        print(index_map)\n        valid = True\n        for x, y in applicable_rules:\n            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n                valid = False\n                break\n        if valid:\n            middle_index = len(pages) // 2 # integer division\n            middle_page = int(pages[middle_index])\n            total += middle_page\n    print(total)\n\n\npart_1(rules, orders)\n\n\n'''--- Part Two ---\nFor each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. \nFor the above example, here are the three incorrectly-ordered updates and their correct orderings:\n\n    75,97,47,61,53 becomes 97,75,47,61,53.\n    61,13,29 becomes 61,29,13.\n    97,13,75,29,47 becomes 97,75,47,29,13.\n\nTake only the incorrectly-ordered updates and order them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.\n\nFind updates which are not in the correct order. Add up the middle page numbers after correctly ordering just those updates\n'''\ndef part_2(rules, orders):\n    total = 0\n    for order in orders:\n        pages = [page.strip() for page in order if page.strip()] # remove empty strings\n        if not pages:\n            continue  # Skip empty orders\n        pages_set = set(pages) # remove duplicates\n        applicable_rules = [ # only keep rules that apply to both pages of the order\n            (x.strip(), y.strip()) for x, y in rules\n            if x.strip() in pages_set and y.strip() in pages_set\n        ]\n\n        index_map = {page: idx for idx, page in enumerate(pages)} # map page to index (75,47,61,53,29) -> {75: 0, 47: 1, 61: 2, 53: 3, 29: 4}\n        print(index_map)\n        valid = True\n        for x, y in applicable_rules:\n            if index_map[x] >= index_map[y]: # if the order of the pages != order in the rules\n                valid = False\n                break\n        if valid:\n            middle_index = len(pages) // 2 # integer division\n            middle_page = int(pages[middle_index])\n            total += middle_page"
        }
    ]
}