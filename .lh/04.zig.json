{
    "sourceFile": "04.zig",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1733332345264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733332350808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,5 +16,7 @@\n     var safe_reports: u16 = 0;\n     var line_buffer: [128]u8 = undefined;\n  \n     // iterate lines\n-    while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n\\ No newline at end of file\n+    while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733332361267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     try stdout.print(\"part 2 safe reports: {}\\n\", .{result});\n }\n \n fn part_1 (reader: anytype) !u16 {\n-    var safe_reports: u16 = 0;\n+    var xmas_count: u16 = 0;\n     var line_buffer: [128]u8 = undefined;\n  \n     // iterate lines\n     while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n"
                },
                {
                    "date": 1733332375030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,8 @@\n+const std = @import(\"std\");\n+const stdout = std.io.getStdOut().writer();\n+\n+\n pub fn main () !void {\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n"
                },
                {
                    "date": 1733332394558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,20 @@\n const std = @import(\"std\");\n const stdout = std.io.getStdOut().writer();\n+const mem = std.mem;\n \n-\n pub fn main () !void {\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const reader = file.reader();\n     var result = try part_1(reader);\n     try stdout.print(\"part 1 safe reports: {}\\n\", .{result});\n \n-    try file.seekTo(0);\n+    // try file.seekTo(0);\n \n-    result = try part_2(reader);\n-    try stdout.print(\"part 2 safe reports: {}\\n\", .{result});\n+    // result = try part_2(reader);\n+    // try stdout.print(\"part 2 safe reports: {}\\n\", .{result});\n }\n \n fn part_1 (reader: anytype) !u16 {\n     var xmas_count: u16 = 0;\n"
                },
                {
                    "date": 1733332416351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const reader = file.reader();\n-    var result = try part_1(reader);\n+    const result = try part_1(reader);\n     try stdout.print(\"part 1 safe reports: {}\\n\", .{result});\n \n     // try file.seekTo(0);\n \n"
                },
                {
                    "date": 1733342376073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,11 @@\n     var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n     defer file.close();\n \n     const reader = file.reader();\n+\n+\n+    \n     const result = try part_1(reader);\n     try stdout.print(\"part 1 safe reports: {}\\n\", .{result});\n \n     // try file.seekTo(0);\n"
                },
                {
                    "date": 1733347695579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,110 @@\n const std = @import(\"std\");\n-const stdout = std.io.getStdOut().writer();\n-const mem = std.mem;\n \n-pub fn main () !void {\n-    var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n+pub fn main() !void {\n+    const allocator = std.heap.page_allocator;\n+    const filename = \"inputs/input_04.txt\";\n+\n+    // Open the file\n+    var file = try std.fs.cwd().openFile(filename, .{});\n     defer file.close();\n \n-    const reader = file.reader();\n+    // Read the file content into an ArrayList\n+    var reader = file.reader();\n+    var lines = std.ArrayList([]const u8).init(allocator);\n+    defer lines.deinit();\n \n+    while (true) {\n+        var line = try reader.readUntilDelimiterOrEofAlloc(allocator, '\\n', 1024);\n+        if (line.len == 0) break;\n+        // Remove the newline character\n+        if (line[line.len - 1] == '\\n') {\n+            line = line[0..line.len - 1];\n+        }\n+        try lines.append(line);\n+    }\n \n-    \n-    const result = try part_1(reader);\n-    try stdout.print(\"part 1 safe reports: {}\\n\", .{result});\n+    const row_size = lines.items.len;\n+    const col_size = if (row_size > 0) lines.items[0].len else 0;\n \n-    // try file.seekTo(0);\n+    // Convert lines to 2D array\n+    var data = try allocator.allocMatrix(u8, row_size, col_size);\n+    defer allocator.freeMatrix(data);\n \n-    // result = try part_2(reader);\n-    // try stdout.print(\"part 2 safe reports: {}\\n\", .{result});\n+    for (lines.items) |line, i| {\n+        std.mem.copy(u8, data[i], line);\n+    }\n+\n+    // Part 1: Find XMAS\n+    var count_xmas = find_xmas(data, row_size, col_size);\n+    try std.debug.print(\"Number of XMAS found: {}\\n\", .{count_xmas});\n+\n+    // Part 2: Find X-MAS\n+    var count_x_mas = find_x_mas(data, row_size, col_size);\n+    try std.debug.print(\"Number of X-MAS found: {}\\n\", .{count_x_mas});\n }\n \n-fn part_1 (reader: anytype) !u16 {\n-    var xmas_count: u16 = 0;\n-    var line_buffer: [128]u8 = undefined;\n- \n-    // iterate lines\n-    while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {\n+fn find_xmas(data: [][]u8, row_size: usize, col_size: usize) usize {\n+    var count: usize = 0;\n+    const directions = [_][2]i32{\n+        {0, 1},   // Right\n+        {0, -1},  // Left\n+        {1, 0},   // Down\n+        {-1, 0},  // Up\n+        {1, 1},   // Down Right\n+        {-1, -1}, // Up Left\n+        {-1, 1},  // Up Right\n+        {1, -1},  // Down Left\n+    };\n+    const word = \"XMAS\";\n+    const word_len = word.len;\n+\n+    for (0..row_size) |row| {\n+        for (0..col_size) |col| {\n+            if (data[row][col] == 'X') {\n+                for (directions) |dir| {\n+                    var k: usize = 1;\n+                    var new_row = @intCast(isize, row);\n+                    var new_col = @intCast(isize, col);\n+                    while (k < word_len) : (k += 1) {\n+                        new_row += dir[0];\n+                        new_col += dir[1];\n+                        if (new_row < 0 or new_row >= @intCast(isize,row_size) or new_col < 0 or new_col >= @intCast(isize,col_size))\n+                            break;\n+                        if (data[@intCast(usize,new_row)][@intCast(usize,new_col)] != word[k])\n+                            break;\n+                    }\n+                    if (k == word_len) {\n+                        count += 1;\n+                    }\n+                }\n+            }\n+        }\n     }\n+    return count;\n+}\n+\n+fn find_x_mas(data: [][]u8, row_size: usize, col_size: usize) usize {\n+    var count: usize = 0;\n+\n+    for (1..row_size - 1) |row| {\n+        for (1..col_size - 1) |col| {\n+            if (data[row][col] == 'A') {\n+                // Diagonal 1: up-left and down-right\n+                const ul = data[row - 1][col - 1];\n+                const dr = data[row + 1][col + 1];\n+                const diag1_match = ((ul == 'M' and dr == 'S') or (ul == 'S' and dr == 'M'));\n+\n+                // Diagonal 2: up-right and down-left\n+                const ur = data[row - 1][col + 1];\n+                const dl = data[row + 1][col - 1];\n+                const diag2_match = ((ur == 'M' and dl == 'S') or (ur == 'S' and dl == 'M'));\n+\n+                if (diag1_match and diag2_match) {\n+                    count += 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    return count;\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733332345264,
            "name": "Commit-0",
            "content": "pub fn main () !void {\n    var file = try std.fs.cwd().openFile(\"inputs/input_02.txt\", .{});\n    defer file.close();\n\n    const reader = file.reader();\n    var result = try part_1(reader);\n    try stdout.print(\"part 1 safe reports: {}\\n\", .{result});\n\n    try file.seekTo(0);\n\n    result = try part_2(reader);\n    try stdout.print(\"part 2 safe reports: {}\\n\", .{result});\n}\n\nfn part_1 (reader: anytype) !u16 {\n    var safe_reports: u16 = 0;\n    var line_buffer: [128]u8 = undefined;\n \n    // iterate lines\n    while (try reader.readUntilDelimiterOrEof( &line_buffer, '\\n')) |line| {"
        }
    ]
}